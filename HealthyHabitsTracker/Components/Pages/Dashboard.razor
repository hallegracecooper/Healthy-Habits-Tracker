@* 
    Dashboard Page - Main interface for habit tracking
    Displays all user habits with completion status, progress tracking, and management options
    Features: habit cards, progress statistics, streak tracking, and weekly summaries
*@
@page "/dashboard"
@attribute [Authorize] // Require user authentication to access this page
@using HealthyHabitsTracker.Data
@using HealthyHabitsTracker.Models
@using HealthyHabitsTracker.Services
@using System.Security.Claims

@* Dependency injection for database access, HTTP context, and progress calculations *@
@inject AppDbContext Db
@inject IHttpContextAccessor HttpAccessor
@inject HabitProgressService ProgressService

<PageTitle>Dashboard</PageTitle>

<div class="container-fluid py-4">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h2 mb-1">Your Habits</h1>
                    <p class="text-muted mb-0">Track and manage your daily habits</p>
                </div>
                <a class="btn btn-primary btn-lg d-flex align-items-center justify-content-center" href="/habit/new"
                    aria-label="Add a new habit">
                    New Habit
                </a>
            </div>
        </div>
    </div>

    <!-- Content -->
    @if (habits is null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status" aria-label="Loading habits">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Loading your habits...</p>
        </div>
    }
    else if (!habits.Any())
    {
        <!-- Empty State -->
        <div class="row justify-content-center">
            <div class="col-lg-6 col-md-8">
                <div class="card border-0 shadow-sm text-center py-5">
                    <div class="card-body">
                        <div class="mb-4">
                            <span class="oi oi-plus-circle display-4 text-muted" aria-hidden="true"></span>
                        </div>
                        <h3 class="card-title">No habits yet</h3>
                        <p class="card-text text-muted mb-4">
                            Start building healthy habits today. Create your first habit to get started on your wellness
                            journey.
                        </p>
                        <a class="btn btn-primary btn-lg" href="/habit/new" aria-label="Create your first habit">
                            Create Your First Habit
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Habits Grid -->
        <div class="row g-4">
            @foreach (var h in habits)
            {
                <div class="col-xl-4 col-lg-6 col-md-6">
                    <div class="card h-100 shadow-lg habit-card @(h.IsComplete ? "border-success" : "border-light")"
                        role="article" aria-labelledby="habit-title-@h.HabitId" style="border-width: 2px;">

                        <!-- Card Header with Toggle -->
                        <div class="card-header @(h.IsComplete ? "bg-success-subtle" : "bg-light") border-0">
                            <div class="d-flex justify-content-between align-items-center">
                                <h3 id="habit-title-@h.HabitId" class="card-title h5 mb-0 text-dark">@h.Title</h3>
                                <form method="post" action="/habits/toggle" class="d-inline">
                                    <AntiforgeryToken />
                                    <input type="hidden" name="HabitId" value="@h.HabitId" />
                                    <button type="submit"
                                        class="btn @(h.IsComplete ? "btn-success" : "btn-outline-success") btn-sm rounded-circle p-2"
                                        aria-pressed="@h.IsComplete.ToString().ToLower()"
                                        aria-label="@(h.IsComplete ? $"Unmark {h.Title} as complete" : $"Mark {h.Title} as complete")"
                                        style="width: 40px; height: 40px;">
                                        <span class="visually-hidden">@(h.IsComplete ? "Completed" : "Not completed")</span>
                                    </button>
                                </form>
                            </div>
                        </div>

                        <!-- Card Body -->
                        <div class="card-body">
                            @if (!string.IsNullOrWhiteSpace(h.Description))
                            {
                                <p class="card-text text-muted mb-3">@h.Description</p>
                            }

                            <!-- Status Badge -->
                            <div class="mb-3">
                                @if (h.IsComplete)
                                {
                                    <span class="badge bg-success text-white px-3 py-2" role="status" aria-live="polite">
                                        Completed
                                    </span>
                                    @if (h.LastCompletedDate is not null)
                                    {
                                        <small class="text-muted d-block mt-2">
                                            Last done: @h.LastCompletedDate?.ToLocalTime().ToString("MMM d, yyyy 'at' h:mm tt")
                                        </small>
                                    }
                                }
                                else
                                {
                                    <span class="badge bg-secondary text-white px-3 py-2" role="status" aria-live="polite">
                                        Pending
                                    </span>
                                }
                            </div>

                            <!-- Streak Information -->
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center">
                                    <small class="text-muted">
                                        Current Streak
                                    </small>
                                    <span class="badge bg-warning text-dark">@GetCurrentStreak(h.HabitId)</span>
                                </div>
                            </div>
                        </div>

                        <!-- Card Actions -->
                        <div class="card-footer bg-transparent border-0">
                            <div class="d-flex gap-2" role="group" aria-label="Actions for @h.Title">
                                <a class="btn btn-outline-primary btn-sm d-flex align-items-center justify-content-center flex-grow-1"
                                    href="/habit/edit/@h.HabitId" aria-label="Edit @h.Title" style="height: 36px;">
                                    Edit
                                </a>
                                <form method="post" action="/habits/delete" class="flex-grow-1"
                                    onsubmit="return confirm('Are you sure you want to delete \'@h.Title\'? This action cannot be undone.');">
                                    <AntiforgeryToken />
                                    <input type="hidden" name="HabitId" value="@h.HabitId" />
                                    <button type="submit"
                                        class="btn btn-outline-danger btn-sm w-100 d-flex align-items-center justify-content-center"
                                        aria-label="Delete @h.Title" style="height: 36px;">
                                        Delete
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Progress Cards -->
        <div class="row mt-5">
            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <div class="mb-3">
                            <span class="oi oi-target display-4 text-primary" aria-hidden="true"></span>
                        </div>
                        <div class="h3 mb-1 text-primary">@progressStats.TotalHabits</div>
                        <small class="text-muted">Total Habits</small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <div class="mb-3">
                            <span class="oi oi-check display-4 text-success" aria-hidden="true"></span>
                        </div>
                        <div class="h3 mb-1 text-success">@habits.Count(h => h.IsComplete)</div>
                        <small class="text-muted">Completed Today</small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <div class="mb-3">
                            <span class="oi oi-calendar display-4 text-info" aria-hidden="true"></span>
                        </div>
                        <div class="h3 mb-1 text-info">@progressStats.WeeklyCompletions</div>
                        <small class="text-muted">This Week</small>
                    </div>
                </div>
            </div>

            <div class="col-lg-3 col-md-6 mb-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <div class="mb-3">
                            <span class="oi oi-graph display-4 text-warning" aria-hidden="true"></span>
                        </div>
                        <div class="h3 mb-1 text-warning">@Math.Round(progressStats.WeeklyCompletionRate, 0)%</div>
                        <small class="text-muted">Weekly Rate</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Weekly Progress Bar -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <span class="oi oi-bar-chart me-2" aria-hidden="true"></span>
                            Weekly Progress
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="fw-medium">Completion Progress</span>
                            <span class="text-muted">@progressStats.WeeklyCompletions completions this week</span>
                        </div>
                        <div class="progress" style="height: 20px;">
                            <div class="progress-bar bg-success" role="progressbar"
                                style="width: @(progressStats.WeeklyCompletionRate)%"
                                aria-valuenow="@progressStats.WeeklyCompletionRate" aria-valuemin="0" aria-valuemax="100">
                                @Math.Round(progressStats.WeeklyCompletionRate, 0)%
                            </div>
                        </div>
                        <small class="text-muted mt-2 d-block">
                            @if (progressStats.WeeklyCompletionRate >= 80)
                            {
                                <span class="text-success">🎉 Excellent progress this week!</span>
                            }
                            else if (progressStats.WeeklyCompletionRate >= 60)
                            {
                                <span class="text-info">👍 Good progress, keep it up!</span>
                            }
                            else if (progressStats.WeeklyCompletionRate >= 40)
                            {
                                <span class="text-warning">💪 You're making progress!</span>
                            }
                            else
                            {
                                <span class="text-muted">🌟 Every step counts - keep going!</span>
                            }
                        </small>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // ===================== COMPONENT STATE =====================
    
    /// <summary>List of user's habits loaded from database</summary>
    private List<Habit>? habits;
    
    /// <summary>Progress statistics including weekly completion rates and totals</summary>
    private HabitProgressStats progressStats = new();
    
    /// <summary>Current authenticated user's unique identifier</summary>
    private string? userId;
    
    /// <summary>Pre-calculated streak counts for each habit to improve performance</summary>
    private Dictionary<int, int> habitStreaks = new();

    /// <summary>
    /// Component initialization - Loads user data and calculates progress metrics
    /// Called when the component is first rendered
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Get the current user's ID from the authentication context
        userId = HttpAccessor.HttpContext?.User.FindFirstValue(ClaimTypes.NameIdentifier);
        
        if (!string.IsNullOrEmpty(userId))
        {
            // Load all habits for the current user, ordered by creation date (newest first)
            habits = Db.Habits
                .Where(h => h.UserId == userId)
                .OrderByDescending(h => h.DateCreated)
                .ToList();

            // Calculate overall progress statistics for the user
            progressStats = await ProgressService.GetProgressStatsAsync(userId);

            // Pre-calculate streaks for all habits to avoid repeated database calls
            // This improves performance by batching streak calculations
            if (habits.Any())
            {
                foreach (var habit in habits)
                {
                    habitStreaks[habit.HabitId] = await ProgressService.GetCurrentStreakAsync(habit.HabitId, userId);
                }
            }
        }
        else
        {
            // No authenticated user - show empty state
            habits = new();
        }
    }

    /// <summary>
    /// Gets the current streak count for a specific habit
    /// Uses pre-calculated values for better performance
    /// </summary>
    /// <param name="habitId">The ID of the habit to get the streak for</param>
    /// <returns>The current streak count, or 0 if not found</returns>
    private int GetCurrentStreak(int habitId)
    {
        return habitStreaks.TryGetValue(habitId, out var streak) ? streak : 0;
    }
}
